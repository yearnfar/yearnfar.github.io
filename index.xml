<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>知识时光机</title><link>https://blog.yearnfar.com/</link><description>Recent content on 知识时光机</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>yearnfar 2022</copyright><lastBuildDate>Sun, 29 May 2022 00:26:10 +0800</lastBuildDate><atom:link href="https://blog.yearnfar.com/index.xml" rel="self" type="application/rss+xml"/><item><title>使用tinyproxy搭建代理服务器</title><link>https://blog.yearnfar.com/posts/%E4%BD%BF%E7%94%A8tinyproxy%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Sun, 29 May 2022 00:26:10 +0800</pubDate><guid>https://blog.yearnfar.com/posts/%E4%BD%BF%E7%94%A8tinyproxy%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>知识时光机 https://blog.yearnfar.com/posts/%E4%BD%BF%E7%94%A8tinyproxy%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/ -&lt;p>程序员都有遇到，需要在终端设置http_proxy的情况。这里介绍使用tinyproxy使得在终端科学上网。&lt;/p>
&lt;h3 id="源码编译安装tinyproxy">源码编译安装Tinyproxy&lt;/h3>
&lt;p>&lt;a href="https://github.com/tinyproxy/tinyproxy">Tinyproxy项目地址&lt;/a>&lt;/p>
&lt;p>下载安装包到本地&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">[yearnfar@aws ~]$ wget https://github.com/tinyproxy/tinyproxy/releases/download/1.11.1/tinyproxy-1.11.1.tar.gz
[yearnfar@aws ~]$ tar zxvf tinyproxy-1.11.1.tar.gz
[yearnfar@aws ~]$ &lt;span style="color:#658b00">cd&lt;/span> tinyproxy-1.11.1
[yearnfar@aws ~]$ ./configure --prefix=/usr/local/tinyproxy
[yearnfar@aws ~]$ make
&lt;span style="color:#228b22"># 如果提示性没有 gcc&lt;/span>
&lt;span style="color:#228b22"># [yearnfar@aws ~]$ make yum install gcc&lt;/span>
[yearnfar@aws ~]$ sudo make install
[yearnfar@aws ~]$ &lt;span style="color:#658b00">cd&lt;/span> /usr/local/tinyproxy
[yearnfar@aws tinyproxy]$ ls
bin etc share
[yearnfar@aws tinyproxy]$ sudo cp -r etc/tinyproxy /etc/ &lt;span style="color:#228b22"># 将配置文件移动到/etc目录&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改配置文件&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#658b00">User nobody&lt;/span>
&lt;span style="color:#658b00">Group nobody&lt;/span>
&lt;span style="color:#228b22"># 为了避免被扫描到，最好修改一个端口&lt;/span>
&lt;span style="color:#658b00">Port 8888 &lt;/span>
&lt;span style="color:#658b00">Timeout 600&lt;/span>
&lt;span style="color:#658b00">DefaultErrorFile &amp;#34;/usr/local/tinyproxy/share/tinyproxy/default.html&amp;#34;&lt;/span>
&lt;span style="color:#658b00">StatFile &amp;#34;/usr/local/tinyproxy/share/tinyproxy/stats.html&amp;#34;&lt;/span>
&lt;span style="color:#658b00">LogFile &amp;#34;/var/log/tinyproxy.log&amp;#34;&lt;/span>
&lt;span style="color:#658b00">LogLevel Info&lt;/span>
&lt;span style="color:#658b00">PidFile &amp;#34;/var/run/tinyproxy.pid&amp;#34;&lt;/span>
&lt;span style="color:#658b00">MaxClients 100&lt;/span>
&lt;span style="color:#228b22"># 需要设置一个密码，防止被扫描到，被搭便车&lt;/span>
&lt;span style="color:#658b00">BasicAuth youname your_password&lt;/span>
&lt;span style="color:#228b22"># 必须设置，否则默认禁止全部代理&lt;/span>
&lt;span style="color:#658b00">FilterDefaultDeny No&lt;/span>
&lt;span style="color:#228b22"># 需要注释掉，否则只能本机使用&lt;/span>
&lt;span style="color:#228b22">#Allow 127.0.0.1&lt;/span>
&lt;span style="color:#228b22">#Allow ::1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动代理服务器&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">[yearnfar@aws tinyproxy]$ sudo /usr/local/tinyproxy/bin/tinyproxy -c /etc/tinyproxy/tinyproxy
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="测试代理">测试代理&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">➜ ~ curl cip.cc
IP : 218.19.46.x
地址 : 中国 广东 广州
运营商 : 电信
数据二 : 广东省广州市 | 电信
数据三 :
URL : http://www.cip.cc/218.19.46.x
➜ ~ &lt;span style="color:#658b00">export&lt;/span> &lt;span style="color:#00688b">http_proxy&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;http://yourname:your_password@you_ip:8888&amp;#34;&lt;/span>
➜ ~ curl cip.cc
IP : 13.214.254.x
地址 : 美国 美国
数据二 : 美国 | Xerox
数据三 : 美国康涅狄格 | 亚马逊
URL : http://www.cip.cc/13.214.254.x
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，代理正常。如果不正常，可以按以下顺序检查：&lt;/p>
&lt;ul>
&lt;li>Tinyproxy服务是否启动&lt;/li>
&lt;li>云服务器安全组设置是否开放Tinyproxy的监听端口（例如:8888）。&lt;/li>
&lt;/ul>
&lt;h3 id="设置开机自启">设置开机自启&lt;/h3>
&lt;p>创建文件tinyproxy.service&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#8b008b;font-weight:bold">[Unit]&lt;/span>
&lt;span style="color:#658b00">Description&lt;/span>=&lt;span style="color:#cd5555">Tinyproxy daemon&lt;/span>
&lt;span style="color:#658b00">Requires&lt;/span>=&lt;span style="color:#cd5555">network.target&lt;/span>
&lt;span style="color:#658b00">After&lt;/span>=&lt;span style="color:#cd5555">network.target&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">[Service]&lt;/span>
&lt;span style="color:#658b00">Type&lt;/span>=&lt;span style="color:#cd5555">forking&lt;/span>
&lt;span style="color:#658b00">PIDFile&lt;/span>=&lt;span style="color:#cd5555">/var/run/tinyproxy.pid&lt;/span>
&lt;span style="color:#658b00">ExecStart&lt;/span>=&lt;span style="color:#cd5555">/usr/sbin/tinyproxy -c /etc/tinyproxy/tinyproxy.conf&lt;/span>
&lt;span style="color:#658b00">Restart&lt;/span>=&lt;span style="color:#cd5555">on-failure&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">[Install]&lt;/span>
&lt;span style="color:#658b00">WantedBy&lt;/span>=&lt;span style="color:#cd5555">multi-user.target&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">[yearnfar@aws ~]$ sudo cp tinyproxy.service /lib/systemd/system/tinyproxy.service
[yearnfar@aws ~]$ sudo systemctl &lt;span style="color:#658b00">enable&lt;/span> tinyproxy
[yearnfar@aws ~]$ sudo systemctl start tinyproxy
&lt;/code>&lt;/pre>&lt;/div>- https://blog.yearnfar.com/posts/%E4%BD%BF%E7%94%A8tinyproxy%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/ - yearnfar 2022</description></item><item><title>在Jetson Nano上跑yolov5</title><link>https://blog.yearnfar.com/posts/%E5%9C%A8jetson-nano%E4%B8%8A%E8%B7%91yolov5/</link><pubDate>Sun, 22 May 2022 18:16:32 +0800</pubDate><guid>https://blog.yearnfar.com/posts/%E5%9C%A8jetson-nano%E4%B8%8A%E8%B7%91yolov5/</guid><description>知识时光机 https://blog.yearnfar.com/posts/%E5%9C%A8jetson-nano%E4%B8%8A%E8%B7%91yolov5/ -&lt;h2 id="jetson-naon搭建">Jetson Naon搭建&lt;/h2>
&lt;p>参考官方文档：&lt;a href="https://developer.nvidia.com/zh-cn/embedded/learn/get-started-jetson-nano-devkit">Jetson Nano 开发者套件入门&lt;/a>&lt;/p>
&lt;p>按照官方文档搭建好Jetson Nano环境后，可以看到/usr/local/cuda目录，将CUDA加入环境变量：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#658b00">export&lt;/span> &lt;span style="color:#00688b">CUDA_HOME&lt;/span>=/usr/local/cuda
&lt;span style="color:#658b00">export&lt;/span> &lt;span style="color:#00688b">PATH&lt;/span>=&lt;span style="color:#00688b">$CUDA_HOME&lt;/span>/bin:&lt;span style="color:#00688b">$PATH&lt;/span>
&lt;span style="color:#658b00">export&lt;/span> &lt;span style="color:#00688b">LD_LIBRARY_PATH&lt;/span>=&lt;span style="color:#00688b">$CUDA_HOME&lt;/span>/lib64:&lt;span style="color:#00688b">$LD_LIBRARY_PATH&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看CUDA信息&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">➜ ~ nvcc -V
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2021 NVIDIA Corporation
Built on Sun_Feb_28_22:34:44_PST_2021
Cuda compilation tools, release 10.2, V10.2.300
Build cuda_10.2_r440.TC440_70.29663091_0
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="准备python">准备Python&lt;/h2>
&lt;p>以前一直使用Anaconda管理Python环境，但是在Jetson Nano安装Anaconda或Miniconda时都出现了&amp;quot;core dumped&amp;quot;，最后发现了miniforge 这个项目。&lt;/p>
&lt;p>我这里安装的是4.12.0版本：&lt;a href="https://github.com/conda-forge/miniforge/releases/download/4.12.0-0/Mambaforge-4.12.0-0-Linux-aarch64.sh">Mambaforge-Linux-aarch64.sh&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">➜ ~ sudo ./Mambaforge-Linux-aarch64.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装好Mamba后就是创建Python环境了。&lt;/p>
&lt;p>因为PyTorch官方不提供ARM aarch64架构的CUDA版本，所以我下载Nvida官网编译好的二进制包。目前提供PyTorch1.0.0 ~ PyTorch1.12.0 总计13个版本可供选择。&lt;/p>
&lt;p>&lt;a href="https://forums.developer.nvidia.com/t/pytorch-for-jetson-version-1-11-now-available/72048">PyTorch for Jetson&lt;/a>&lt;/p>
&lt;p>怎么选择PyTorch版本呢？我们可以看到不同的PyTorch版本对JetPack版本要求是不一样，先查看Jetson Nano的JetPack版本。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">➜ ~ cat /etc/nv_tegra_release
&lt;span style="color:#228b22"># R32 (release), REVISION: 7.2, GCID: 30192233, BOARD: t210ref, EABI: aarch64, DATE: Wed Apr 20 21:34:48 UTC 2022&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到默认安装的是JetPack R32，JetPack R32支持的PyTorch最高的版本是v1.10.0，对应的Python版本是3.6。&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/05/f2797550a253297f6de428e927cd81ed.jpg" alt="nvidia">&lt;/p>
&lt;p>创建Python3.6环境：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">mamba create -n yolov5 &lt;span style="color:#00688b">python&lt;/span>=3.6
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装pytorch">安装PyTorch&lt;/h2>
&lt;p>下载&lt;a href="https://developer.nvidia.com/zh-cn/embedded/learn/get-started-jetson-nano-devkit">PyTorch&lt;/a>，并运行下面命令安装。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo apt-get install libopenblas-base libopenmpi-dev libomp-dev
pip install Cython
pip install torch-1.10.0-cp36-cp36m-linux_aarch64.whl
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查PyTorch安装情况：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">(yolov5) ➜ python
Python 3.6.15 | packaged by conda-forge | (default, Dec &lt;span style="color:#b452cd">3&lt;/span> 2021, 19:12:04)
[GCC 9.4.0] on linux
Type &lt;span style="color:#cd5555">&amp;#34;help&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;copyright&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;credits&amp;#34;&lt;/span> or &lt;span style="color:#cd5555">&amp;#34;license&amp;#34;&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> more information.
&amp;gt;&amp;gt;&amp;gt; import torch
&amp;gt;&amp;gt;&amp;gt; print(torch.cuda.is_available())
True
&amp;gt;&amp;gt;&amp;gt; print(torch.backends.cudnn.version())
&lt;span style="color:#b452cd">8201&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装torversion">安装torversion&lt;/h2>
&lt;p>因为PyTorch选择的是v1.10.0，所以torchvision需要安装版本0.11.0。因为torchvision依赖pillow，安装时默认会安装最新的pillow。但是最新的pillow会产生其他问题，所以这里先安装好pillow版本8.4.0。&lt;/p>
&lt;p>&lt;a href="https://github.com/pytorch/vision">Torchvision项目地址&lt;/a>&lt;/p>
&lt;p>先安装依赖&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">(yolov5) ➜ ~ sudo apt-get install libjpeg8 libjpeg62-dev libfreetype6 libfreetype6-dev
(yolov5) ➜ ~ pip install &lt;span style="color:#00688b">pillow&lt;/span>==8.4.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下载torchvision源码，并安装：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">python setup.py install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查torchvision安装情况：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">(yolov5) ➜ ~ python
Python 3.6.15 | packaged by conda-forge | (default, Dec &lt;span style="color:#b452cd">3&lt;/span> 2021, 19:12:04)
[GCC 9.4.0] on linux
Type &lt;span style="color:#cd5555">&amp;#34;help&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;copyright&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;credits&amp;#34;&lt;/span> or &lt;span style="color:#cd5555">&amp;#34;license&amp;#34;&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> more information.
&amp;gt;&amp;gt;&amp;gt; import torchvision
&amp;gt;&amp;gt;&amp;gt; print(torchvision.__version__)
0.11.0a0
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装yolov5">安装Yolov5&lt;/h2>
&lt;p>&lt;a href="https://github.com/ultralytics/yolov5">Yolov5项目地址&lt;/a>&lt;/p>
&lt;p>下载项目源码，并安装依赖：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">(yolov5) ➜ ~ pip install -r requirements.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行yolov5：&lt;/p>
&lt;pre>&lt;code>(yolov5) ➜ yolov5 python detect.py --source 0
&lt;/code>&lt;/pre>&lt;p>效果如下：&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/05/7e866c29da33e98d7d2eeea6d25b3af6.png" alt="23-07-36屏幕截图">&lt;/p>
- https://blog.yearnfar.com/posts/%E5%9C%A8jetson-nano%E4%B8%8A%E8%B7%91yolov5/ - yearnfar 2022</description></item><item><title>systemctl使用方式</title><link>https://blog.yearnfar.com/posts/systemctl%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</link><pubDate>Sun, 22 May 2022 17:53:42 +0800</pubDate><guid>https://blog.yearnfar.com/posts/systemctl%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</guid><description>知识时光机 https://blog.yearnfar.com/posts/systemctl%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/ -&lt;p>以nginx为例，介绍如何使用systemctl 把程序做成服务。&lt;/p>
&lt;h2 id="配置">配置&lt;/h2>
&lt;p>创建服务配置文件 nginx.service&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#8b008b;font-weight:bold">[Unit]&lt;/span>
&lt;span style="color:#658b00">Description&lt;/span>=&lt;span style="color:#cd5555">The nginx HTTP and reverse proxy server&lt;/span>
&lt;span style="color:#658b00">After&lt;/span>=&lt;span style="color:#cd5555">network.target remote-fs.target nss-lookup.target&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">[Service]&lt;/span>
&lt;span style="color:#658b00">Type&lt;/span>=&lt;span style="color:#cd5555">forking&lt;/span>
&lt;span style="color:#658b00">PIDFile&lt;/span>=&lt;span style="color:#cd5555">/run/nginx.pid&lt;/span>
&lt;span style="color:#228b22"># Nginx will fail to start if /run/nginx.pid already exists but has the wrong&lt;/span>
&lt;span style="color:#228b22"># SELinux context. This might happen when running `nginx -t` from the cmdline.&lt;/span>
&lt;span style="color:#228b22"># https://bugzilla.redhat.com/show_bug.cgi?id=1268621&lt;/span>
&lt;span style="color:#658b00">ExecStartPre&lt;/span>=&lt;span style="color:#cd5555">/usr/bin/rm -f /run/nginx.pid&lt;/span>
&lt;span style="color:#658b00">ExecStartPre&lt;/span>=&lt;span style="color:#cd5555">/usr/sbin/nginx -t&lt;/span>
&lt;span style="color:#658b00">ExecStart&lt;/span>=&lt;span style="color:#cd5555">/usr/sbin/nginx&lt;/span>
&lt;span style="color:#658b00">ExecReload&lt;/span>=&lt;span style="color:#cd5555">/bin/kill -s HUP $MAINPID&lt;/span>
&lt;span style="color:#658b00">KillSignal&lt;/span>=&lt;span style="color:#cd5555">SIGQUIT&lt;/span>
&lt;span style="color:#658b00">TimeoutStopSec&lt;/span>=&lt;span style="color:#cd5555">5&lt;/span>
&lt;span style="color:#658b00">KillMode&lt;/span>=&lt;span style="color:#cd5555">mixed&lt;/span>
&lt;span style="color:#658b00">PrivateTmp&lt;/span>=&lt;span style="color:#cd5555">true&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">[Install]&lt;/span>
&lt;span style="color:#658b00">WantedBy&lt;/span>=&lt;span style="color:#cd5555">multi-user.target&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将nginx.service 放到 /lib/systemd/system/ 目录，systemctl会在这个目录查找配置文件。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo mv nginx.service /lib/systemd/system/
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="常用命令">常用命令&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#228b22"># 开启自动启动&lt;/span>
sudo systemctl &lt;span style="color:#658b00">enable&lt;/span> nginx
&lt;span style="color:#228b22"># 取消开机启动&lt;/span>
sudo systemctl disable nginx
&lt;span style="color:#228b22"># 启动服务&lt;/span>
sudo systemctl start nginx
&lt;span style="color:#228b22"># 停止服务&lt;/span>
sudo systemcl stop nginx
&lt;/code>&lt;/pre>&lt;/div>- https://blog.yearnfar.com/posts/systemctl%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/ - yearnfar 2022</description></item><item><title>为什么中国古人不能发明蒸汽机</title><link>https://blog.yearnfar.com/posts/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%AD%E5%9B%BD%E5%8F%A4%E4%BA%BA%E4%B8%8D%E8%83%BD%E5%8F%91%E6%98%8E%E8%92%B8%E6%B1%BD%E6%9C%BA/</link><pubDate>Mon, 16 May 2022 21:38:00 +0800</pubDate><guid>https://blog.yearnfar.com/posts/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%AD%E5%9B%BD%E5%8F%A4%E4%BA%BA%E4%B8%8D%E8%83%BD%E5%8F%91%E6%98%8E%E8%92%B8%E6%B1%BD%E6%9C%BA/</guid><description>知识时光机 https://blog.yearnfar.com/posts/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%AD%E5%9B%BD%E5%8F%A4%E4%BA%BA%E4%B8%8D%E8%83%BD%E5%8F%91%E6%98%8E%E8%92%B8%E6%B1%BD%E6%9C%BA/ -&lt;p>以现代视角来看，蒸汽机原理并不算复杂，为什么古人在几千年的历史中都没有发明蒸汽机？我从来没有怀疑过古人的聪明智慧，但是没有发明蒸汽机，我相信有其中的必然原因。于是我带着一台瓦特改良的蒸汽机开始了我的穿越之旅。&lt;/p>
&lt;h3 id="蒸汽机vs汉朝黄牛">蒸汽机VS汉朝黄牛&lt;/h3>
&lt;p>首先我穿越来到了汉朝，虽然在汉朝人们已经开始使用煤炭，但是并没有大规模应用，我只能使用木材当做燃料。&lt;/p>
&lt;p>我请了一个樵夫，帮我打柴，并把蒸汽机搬到了广场上，向人们展示我的蒸汽机。&lt;/p>
&lt;p>“它能做什么”？有人问道。&lt;/p>
&lt;p>“他能推动磨盘，所有需要人力的事他都能做！”&lt;/p>
&lt;p>“哦，跟水车一样啊。我看你往里面加木柴，但是水车不需要木柴呢！”&lt;/p>
&lt;p>“水车只能建在有水的地方，我这个可以建在所有有水的地方。” 我气愤的说道。&lt;/p>
&lt;p>“没有水的地方可以使用牛啊”又有人说道。&lt;/p>
&lt;p>我竟然无言以对，想想也是，牛只需要吃草，既然耕地，拉磨，也能拉车。&lt;/p>
&lt;p>于是在汉朝黄牛VS 蒸汽机，蒸汽机败了。&lt;/p>
&lt;h3 id="蒸汽机vs大明船帆">蒸汽机VS大明船帆&lt;/h3>
&lt;p>在认真分析了汉朝的失败经验后，我决定穿越到明朝。原因有二：&lt;/p>
&lt;ol>
&lt;li>明朝已经开始大规模使用煤炭了，燃料问题解决了。&lt;/li>
&lt;li>明朝航海业发达，大船&amp;amp;蒸汽机是个不错的落地方案。&lt;/li>
&lt;/ol>
&lt;p>于是我直接穿越到了明朝，找到郑和，向他推销我的蒸汽机。&lt;/p>
&lt;p>“大人，这个设备可以装到大船上，代替人力，只需要烧煤炭就可以了。”我说道&lt;/p>
&lt;p>“这个东西这么大，船甲板能承受得了这个重量吗？”郑和问道。&lt;/p>
&lt;p>“甲板上都用铁板就可以了”。我自信满满的说道&lt;/p>
&lt;p>“装满煤炭能去下西洋吗？到了没有煤的地方怎么办呢？”。郑和问道&lt;/p>
&lt;p>“我&amp;hellip;&amp;quot;&lt;/p>
&lt;p>到了明朝，我的蒸汽机竟然面临了和新能源一样的困境，里程焦虑。并不是每个地方都可以买到煤，相比之下船帆+人力的组合更靠谱一些。&lt;/p>
&lt;h3 id="反思">反思&lt;/h3>
&lt;p>看样子不是古人不够聪明，恰恰相反，是他们太聪明，蒸汽机并不是他们当时场景下的最佳的选择而没有被发明。&lt;/p>
&lt;p>但是这么先进的东西，没有被发明确实一种遗憾，我们应该避免在当今年代遇到蒸汽机同样的问题。庆幸的是我们这个时代有实验室、研究所这些机构，他们不用太关注经济利益，去研究科学。&lt;/p>
&lt;h3 id="heading">&lt;/h3>
- https://blog.yearnfar.com/posts/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%AD%E5%9B%BD%E5%8F%A4%E4%BA%BA%E4%B8%8D%E8%83%BD%E5%8F%91%E6%98%8E%E8%92%B8%E6%B1%BD%E6%9C%BA/ - yearnfar 2022</description></item><item><title>IGC2022-05-16</title><link>https://blog.yearnfar.com/posts/igc2022-05-16/</link><pubDate>Mon, 16 May 2022 19:14:22 +0800</pubDate><guid>https://blog.yearnfar.com/posts/igc2022-05-16/</guid><description>知识时光机 https://blog.yearnfar.com/posts/igc2022-05-16/ -&lt;p>最近连着下了几天雨，今天天气有转好的迹象，拍几张照片留作纪念。&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/05/a6c10bc497e8ab4afab67c35d1cefa98.jpg" alt="广州塔-小蛮腰">&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/05/658c297d1ddcd04aa5d639838934883a.jpg" alt="周大福中心">&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/05/84ddc87eaa55b2a0516c86f6dc18d599.jpg" alt="晚霞">&lt;/p>
- https://blog.yearnfar.com/posts/igc2022-05-16/ - yearnfar 2022</description></item><item><title>su和su -和sudo区别</title><link>https://blog.yearnfar.com/posts/su%E5%92%8Csu-%E5%92%8Csudo%E5%8C%BA%E5%88%AB/</link><pubDate>Tue, 10 May 2022 19:24:06 +0800</pubDate><guid>https://blog.yearnfar.com/posts/su%E5%92%8Csu-%E5%92%8Csudo%E5%8C%BA%E5%88%AB/</guid><description>知识时光机 https://blog.yearnfar.com/posts/su%E5%92%8Csu-%E5%92%8Csudo%E5%8C%BA%E5%88%AB/ -&lt;p>最近强迫症又犯了，把自己跑了4年的服务器重装了下系统。重装之后，开始认真的研究如何使用。&lt;/p>
&lt;p>以前很少使用sudo这个命令，如果要root权限一般都是直接su 输入root密码。但是sudo明显要更加方便。于是就开启了sudo权限。&lt;/p>
&lt;h3 id="开启sudo">开启sudo&lt;/h3>
&lt;p>visudo 在root下添加一行&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#228b22">## Allow root to run any commands anywhere&lt;/span>
root &lt;span style="color:#00688b">ALL&lt;/span>=(ALL) ALL
your_name &lt;span style="color:#00688b">ALL&lt;/span>=(ALL) NOPASSWD: ALL
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="su-与-su---与-sudo">su 与 su - 与 sudo&lt;/h3>
&lt;p>su 不加任何参数，切换到root，不变环境变量(与切换前一致)。&lt;/p>
&lt;p>su - ，切换到root，并且切换到root的环境变量。&lt;/p>
&lt;p>sudo能使用root权限执行，但是需要注意使用时将PATH环境变量进行了重置，我们使用sudo visudo 在secure_path可以看到sudo所设置的PATH环境变量。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">Defaults &lt;span style="color:#00688b">secure_path&lt;/span> = /sbin:/bin:/usr/sbin:/usr/bin:
&lt;/code>&lt;/pre>&lt;/div>- https://blog.yearnfar.com/posts/su%E5%92%8Csu-%E5%92%8Csudo%E5%8C%BA%E5%88%AB/ - yearnfar 2022</description></item><item><title>Go1.18泛型实现并发安全的map</title><link>https://blog.yearnfar.com/posts/go1.18%E6%B3%9B%E5%9E%8B%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84map/</link><pubDate>Tue, 26 Apr 2022 00:03:52 +0800</pubDate><guid>https://blog.yearnfar.com/posts/go1.18%E6%B3%9B%E5%9E%8B%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84map/</guid><description>知识时光机 https://blog.yearnfar.com/posts/go1.18%E6%B3%9B%E5%9E%8B%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84map/ -&lt;p>使用go泛型失效并发安全的map结构&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8b008b;font-weight:bold">package&lt;/span> mut
&lt;span style="color:#8b008b;font-weight:bold">import&lt;/span> (
&lt;span style="color:#cd5555">&amp;#34;sync&amp;#34;&lt;/span>
)
&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span> Map[K, V comparable] &lt;span style="color:#8b008b;font-weight:bold">struct&lt;/span> {
mu sync.RWMutex
values &lt;span style="color:#8b008b;font-weight:bold">map&lt;/span>[K]V
}
&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> (m *Map[K, V]) &lt;span style="color:#008b45">Put&lt;/span>(key K, value V) {
m.mu.&lt;span style="color:#008b45">Lock&lt;/span>()
m.values[key] = value
m.mu.&lt;span style="color:#008b45">Unlock&lt;/span>()
}
&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> (m *Map[K, V]) &lt;span style="color:#008b45">Get&lt;/span>(key K) V {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> v V
m.mu.&lt;span style="color:#008b45">RLock&lt;/span>()
v = m.values[key]
m.mu.&lt;span style="color:#008b45">RUnlock&lt;/span>()
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> v
}
&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> NewMap[K, V comparable]() *Map[K, V] {
m := &amp;amp;Map[K, V]{}
m.values = &lt;span style="color:#658b00">make&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">map&lt;/span>[K]V)
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> m
}
&lt;/code>&lt;/pre>&lt;/div>- https://blog.yearnfar.com/posts/go1.18%E6%B3%9B%E5%9E%8B%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84map/ - yearnfar 2022</description></item><item><title>数据库缓存一致性</title><link>https://blog.yearnfar.com/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/</link><pubDate>Sat, 23 Apr 2022 21:24:40 +0800</pubDate><guid>https://blog.yearnfar.com/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/</guid><description>知识时光机 https://blog.yearnfar.com/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/ -&lt;p>在高并发场景下，保证数据库和缓存一致性&lt;/p>
&lt;p>更新缓存有4中方案&lt;/p>
&lt;ul>
&lt;li>先更新数据库，然后更新缓存&lt;/li>
&lt;li>先更新缓存，然后更新数据库&lt;/li>
&lt;li>先更新数据库，然后删除缓存&lt;/li>
&lt;li>先删除缓存，然后更新数据库&lt;/li>
&lt;/ul>
&lt;p>下面我们分别分四种情况的高并发情况下，四种方案可能出现的问题：&lt;/p>
&lt;h3 id="先更新数据库然后更新缓存">先更新数据库，然后更新缓存&lt;/h3>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/05/c2206948ef2a1252e369019b7a4bc9f2.png" alt="先更新数据库后更新缓存.drawio">&lt;/p>
&lt;p>进程一、进程二都模拟了一个先更新数据库，后更新缓存的场景。&lt;/p>
&lt;p>1、如果进程二更新缓存发生在进程一更新缓存之前（即t3变成了t3`），此时缓存值是v1，数据库值为v2，发生了数据库和缓存不一致的情况。&lt;/p>
&lt;p>2、先更新数据库后更新缓存还存在如果该缓存使用率不高，浪费缓存空间的情况。&lt;/p>
&lt;h3 id="先更新缓存然后更新数据库">先更新缓存，然后更新数据库&lt;/h3>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/05/151eea356a914f714a311347bc0f85e2.png" alt="先更新缓存后更新数据库.drawio">&lt;/p>
&lt;p>进程一、进程二分别模拟了一个先更新缓存，后更新数据库的场景。&lt;/p>
&lt;p>1、如果进程二更新数据库发生在进程一更新数据库之前（即t3变成了t3`），此时缓存值为v2，数据库值为v1，出现了缓存与数据库不一致的情况。&lt;/p>
&lt;p>2、先更新缓存后更新数据库也存在也存在如果key对应缓存使用率不高，浪费缓存空间的情况。&lt;/p>
&lt;h3 id="先更新数据库然后删除缓存">先更新数据库，然后删除缓存&lt;/h3>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/05/5d206e10e5e3d326e0f680ba26210597.png" alt="先更新数据库后删除缓存.drawio">&lt;/p>
&lt;p>进程一、进程三模拟更新数据库并删除缓存。&lt;/p>
&lt;p>进程二模拟首次生成缓存值。&lt;/p>
&lt;p>从上面的图可以看出，如果t3-&amp;gt;t6时间段有更新数据库并删除缓存，则会出数据库中值为v2，但是缓存中值为v1的情况。这种概率几乎可以忽略不计，因为t3-&amp;gt; t6时间非常短，且更新数据库和删除缓存都必须都发生在这个时间才会导致上述情况。&lt;/p>
&lt;p>但是，如果t1或者t5删除缓存失败，则会导致在缓存被删除或失效前读取到的都是旧值。所以这种方案需要确保删除缓存操作的可靠性很高。推荐的做法是，先删除一次，如果删除失败，再写入消息队列，使用消息队列的重试删除，直到删除成功为止。&lt;/p>
&lt;h3 id="先删除缓存后更新数据库">先删除缓存，后更新数据库&lt;/h3>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/05/7eed42dfd1bd9ccef46b8ccc270734c1.png" alt="先删除缓存后更新数据库.drawio">&lt;/p>
&lt;p>进程一、进程三模拟删除缓存并更新数据库。&lt;/p>
&lt;p>进程二模拟首次生成缓存值。&lt;/p>
&lt;p>从上图可以看出，如果进程三在t5之前删除缓存，且在t5后更新数据库，则必然发生数据库中存的值与缓存中存的值不一致的情况。&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/05/286e5d152121fd4f744175a3339b3799.png" alt="先删除缓存后更新数据库2.drawio">&lt;/p>
&lt;p>进程一、进程三模拟删除缓存并更新数据库。&lt;/p>
&lt;p>进程二模拟首次生成缓存值。&lt;/p>
&lt;p>从上图可以看出，如果进程三在t4~t6之间还有写入数据库的操作，也必然发生数据库中存的值与缓存中存的值不一致的情况。&lt;/p>
- https://blog.yearnfar.com/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/ - yearnfar 2022</description></item><item><title>About</title><link>https://blog.yearnfar.com/about/</link><pubDate>Tue, 05 Apr 2022 17:38:38 +0800</pubDate><guid>https://blog.yearnfar.com/about/</guid><description>知识时光机 https://blog.yearnfar.com/about/ -- https://blog.yearnfar.com/about/ - yearnfar 2022</description></item><item><title>知识时光机</title><link>https://blog.yearnfar.com/posts/%E7%9F%A5%E8%AF%86%E6%97%B6%E5%85%89%E6%9C%BA/</link><pubDate>Tue, 05 Apr 2022 09:52:43 +0800</pubDate><guid>https://blog.yearnfar.com/posts/%E7%9F%A5%E8%AF%86%E6%97%B6%E5%85%89%E6%9C%BA/</guid><description>知识时光机 https://blog.yearnfar.com/posts/%E7%9F%A5%E8%AF%86%E6%97%B6%E5%85%89%E6%9C%BA/ -&lt;h1 id="为什么要写博客">为什么要写博客&lt;/h1>
&lt;p>以前在开源中国上面写过一段时间的博客，偶尔也写一些原创性的，但是大多数还是已转载为主。可能是转载的转多了（可以转载为什么要原创），也可能是进步太慢（没有什么可以总结的），后来慢慢的也不写博客了。最近更加注重学习和总结，于是又重新拾起博客，让它记录我学习和成长的过程。&lt;/p>
&lt;h1 id="应该避免的问题">应该避免的问题&lt;/h1>
&lt;p>既然现在开始写博客，我想还是要先总结下以前放弃写博客的原因，以及怎么做才能不重蹈覆辙。&lt;/p>
&lt;h2 id="傻逼定律">傻逼定律&lt;/h2>
&lt;p>写完一篇博客，过了一段时间回过头来看，发现分享的东西特别的初级或者分享的想法不够成熟。这个时候我往往会选择删掉它，或许这是打击我写博客的最大因素吧。人总是在成长，用以后的眼光看现在的东西是不对的，我应该以发现以前的自己是个“傻逼”而高兴，而不是去遮盖我以前是个“傻逼”的事实。&lt;/p>
&lt;h2 id="不转载">不转载&lt;/h2>
&lt;p>以前写博客总喜欢去转载别人的，或者大多数是别人的，自己只是在它的基础上重新组织下。转载就好像写代码的时候直接Copy别人的代码，对其中的很多东西了解的并不彻底。而且自己内心对转载的东西还是比较拒绝的，当发现自己的博客里面大部分都是转载的东西时，就觉得这已经不是自己的博客。慢慢也就没有了写作的兴趣，所以我觉得还是应该不转载其他人的文章。&lt;/p>
&lt;h2 id="心态问题">心态问题&lt;/h2>
&lt;p>以前写一篇博客经常就1~2小时完成，超过了这个时间就觉得不值得，现在回想起来是自己心态也有问题。要真写好一篇博客，需要先选题、查找资料、有时候还要实践、最后才是总结。怎么也不像是1~2小时能完成的事情，如果要短时间内完成，往往也是粗制滥造。粗制滥造的多了，也会挫伤写作积极性。&lt;/p>
&lt;h2 id="写作方式">写作方式&lt;/h2>
&lt;p>以前我一般是在第三方平台(如OSC)或者自己搭建的WordPress上对着编辑器写文章。心里总会有种压迫感，仿佛有人在等我提交。现在改用Hugo+Github Pages，就没有这种压迫感，不发布就不提交，文章保存在本地。而且要迁移也更加方便，我更喜欢这种写作方式。&lt;/p>
- https://blog.yearnfar.com/posts/%E7%9F%A5%E8%AF%86%E6%97%B6%E5%85%89%E6%9C%BA/ - yearnfar 2022</description></item></channel></rss>