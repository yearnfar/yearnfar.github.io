<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>知识时光机</title><link>https://blog.yearnfar.com/</link><description>Recent content on 知识时光机</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>yearnfar 2022</copyright><lastBuildDate>Mon, 20 Jun 2022 22:50:45 +0800</lastBuildDate><atom:link href="https://blog.yearnfar.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Ubuntu系统iptables入门</title><link>https://blog.yearnfar.com/posts/ubuntu%E7%B3%BB%E7%BB%9Fiptables%E5%85%A5%E9%97%A8/</link><pubDate>Mon, 20 Jun 2022 22:50:45 +0800</pubDate><guid>https://blog.yearnfar.com/posts/ubuntu%E7%B3%BB%E7%BB%9Fiptables%E5%85%A5%E9%97%A8/</guid><description>知识时光机 https://blog.yearnfar.com/posts/ubuntu%E7%B3%BB%E7%BB%9Fiptables%E5%85%A5%E9%97%A8/ -&lt;p>一直用云服务商，比如阿里云、AWS等，不需要设置防火墙，只要设置安全组就可以了。&lt;/p>
&lt;p>最近够买了一个SBC，放在家里做服务器，需要自己设置防火墙了。&lt;/p>
&lt;p>本来最简单的方法是使用UFW，可能是我装的系统ufw和iptables版本不对的原因，开启UFW报错，设置的规则全部无效。只能自己写iptables rule了。&lt;/p>
&lt;h3 id="iptables规则持久化">iptables规则持久化&lt;/h3>
&lt;p>如果设置的规则不能持久化，重启系统又要重新设置iptables该多烦人，首先要解决的就是iptables的持久化问题。需要安装iptables-persistent，这样重启系统之后，iptables自动生效。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#228b22"># 安装 iptables-persistent&lt;/span>
sudo apt-get install iptables-persistent
&lt;span style="color:#228b22"># 开机启动&lt;/span>
sudo systemctl &lt;span style="color:#658b00">enable&lt;/span> iptables
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装好iptables-persistent发现生成了/etc/iptables目录，目录里面包含rules.v4、rules.v6两个文件。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#228b22"># 把ipv4防火墙规则持久化&lt;/span>
sudo iptables-save &amp;gt; /etc/iptables/rules.v4
&lt;span style="color:#228b22"># 把ipv6防护墙规则持久化&lt;/span>
sudo ip6tables-save &amp;gt; /etc/iptables/rules.v6
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="防火墙策略">防火墙策略&lt;/h3>
&lt;p>防火墙策略有两种，黑名单或者白名单。&lt;/p>
&lt;p>黑名单，默认允许全部流量，需要限制的协议、端口需要单独设置。&lt;/p>
&lt;p>白名单，默认拒绝全部流量，需要开放的协议、端口需要单独设置。&lt;/p>
&lt;p>黑名单相对简单，白名单则更安全。&lt;/p>
&lt;h3 id="白名单策略">白名单策略&lt;/h3>
&lt;p>在开启白名单设置前，首先一定要开放SSH端口访问，否则一旦开启防火墙，就无法通过SSH登录服务器了。如果你更改过ssh端口，开放你对应的ssh端口即可。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#228b22"># IPv4、IPv6开放22端口&lt;/span>
sudo iptables -A INPUT -p tcp --dport &lt;span style="color:#b452cd">22&lt;/span> -j ACCEPT
sudo ip6tables -A INPUT -p tcp --dport &lt;span style="color:#b452cd">22&lt;/span> -j ACCEPT
&lt;/code>&lt;/pre>&lt;/div>&lt;p>开放SSH端口后，就可以设置默认规则了&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#228b22"># IPv4、IPv6默认将所以的流入数据丢弃&lt;/span>
sudo iptables -P INPUT DROP
sudo ip6tables -P INPUT DROP
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，除了SSH端口外，所有的流入数据都被丢弃了，也就是所有除SSH端口外，全部端口都无法访问。&lt;/p>
&lt;p>清理iptables规则，如果默认规则是DROP，不要运行这个命令，否则会导致无法使用SSH。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo iptable -F
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行了iptables -F 之后，所有的规则都会被清理，如果默认规则是DROP，则会导致无法使用SSH。&lt;/p>
&lt;p>所以更好的白名单设置是，默认允许所有流量，再最后加入拒绝所有流量的规则。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo iptables -P INPUT ACCEPT
sudo ip6tables -P INPUT ACCEPT
sudo iptables -A INPUT -j REJECT
sudo ip6tables -A INPUT -j REJECT
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用黑名单还有个问提，在于有些服务依赖某些端口，但是默认被关闭了，导致服务无法访问。&lt;/p>
&lt;p>下面列举几个我遇到的问题：&lt;/p>
&lt;p>1、使用了nginx反向代理本地端口，这个时候需要对127.0.0.1，允许所有流入数据。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo iptables -A INPUT -p tcp -s 127.0.0.1 -j ACCEPT
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果想深入了解iptables相关设定，推荐一个大佬的博客，讲得特别通俗易懂。&lt;/p>
&lt;p>&lt;a href="https://www.zsythink.net/archives/category/%e8%bf%90%e7%bb%b4%e7%9b%b8%e5%85%b3/iptables">IPtables-朱双印博客&lt;/a>&lt;/p>
- https://blog.yearnfar.com/posts/ubuntu%E7%B3%BB%E7%BB%9Fiptables%E5%85%A5%E9%97%A8/ - yearnfar 2022</description></item><item><title>搭建个人NAS服务的想法</title><link>https://blog.yearnfar.com/posts/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAnas%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%83%B3%E6%B3%95/</link><pubDate>Sun, 05 Jun 2022 12:59:33 +0800</pubDate><guid>https://blog.yearnfar.com/posts/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAnas%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%83%B3%E6%B3%95/</guid><description>知识时光机 https://blog.yearnfar.com/posts/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAnas%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%83%B3%E6%B3%95/ -&lt;p>最近有点想搭建个人NAS服务。原因有以下几点：&lt;/p>
&lt;ol>
&lt;li>NAS服务器可以用于存储个人数据，因为我已经解决了IPv6问题，再外面访问家里的网也不是问题，即使可能遇到IPv6无法访问的情况（比如我连了不支持IPv6路由）也可以通过内网穿透搞定。&lt;/li>
&lt;li>一直开着一台服务器可以对外提供服务，比如IPv6下载站点。毕竟使用各种云服务商的存储和流量是需要花钱的，比如阿里云OSS 5G以内不收存储费用，流量另外计费0.8元/G，而家里的网络不用另外交费用。&lt;/li>
&lt;/ol>
&lt;h3 id="个人nas方案">个人NAS方案&lt;/h3>
&lt;ol>
&lt;li>选择群辉、威联通、绿联之类的品牌&lt;/li>
&lt;li>DIY一套系统&lt;/li>
&lt;/ol>
&lt;p>这里以2个盘，不同方案的费用进行对比，可以看到这些NAS都不便宜。&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/06/0a0984aedb18129df96b88f91b2b350c.png" alt="nas对比">&lt;/p>
&lt;p>考虑到可玩性，我更倾向于自己DIY一个NAS系统，DIY只需要一个mini主机 + 硬盘柜子。&lt;/p>
&lt;p>mini主机可以选择各种pi。比如 树莓派、rock pi、香蕉pi等等。最近树莓派价格高的离谱，直接pass。顺便也可以支持下国产芯片厂商，比如 晶晨、瑞芯微等。当下晶晨的比较好的芯片有A311D、瑞芯微的rk3399、rk3588等。&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/06/59908f054207c33e856c4b10b27f68b0.png" alt="开发板对比">&lt;/p>
&lt;p>硬盘柜&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/06/460c9395d867cfb64710f7912f12b8ba.png" alt="硬盘柜">&lt;/p>
&lt;p>可以看出DIY的费用在 1409 ~ 2134 之间。当然，还想更低也不是不可以，因为除了用作NAS，我还希望它能承担一点服务器的作用。所以我倾向上面三种。&lt;/p>
&lt;p>关于硬盘&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/06/ae43a15f494bfcebeebdfc63daea53c7.png" alt="硬盘">&lt;/p>
&lt;h3 id="写在最后">写在最后&lt;/h3>
&lt;p>DIY的成本大概是购买品牌上的47%~77% 之间。但是即使使用rock pi + 铁威马 + 东芝硬盘(2个硬盘)的最便宜方案，也需要2247元。我的内心更倾向于 Khadas VIM3 + 绿联 + 西部数据（2个硬盘）的方案，成本 3192 元。&lt;/p>
&lt;p>看到这个费用我重新思考了下，我对NAS的需求，可能是个伪需求吧。。。&lt;/p>
- https://blog.yearnfar.com/posts/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAnas%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%83%B3%E6%B3%95/ - yearnfar 2022</description></item><item><title>中国移动宽带设置ipv6</title><link>https://blog.yearnfar.com/posts/%E4%B8%AD%E5%9B%BD%E7%A7%BB%E5%8A%A8%E5%AE%BD%E5%B8%A6%E8%AE%BE%E7%BD%AEipv6/</link><pubDate>Fri, 03 Jun 2022 22:39:34 +0800</pubDate><guid>https://blog.yearnfar.com/posts/%E4%B8%AD%E5%9B%BD%E7%A7%BB%E5%8A%A8%E5%AE%BD%E5%B8%A6%E8%AE%BE%E7%BD%AEipv6/</guid><description>知识时光机 https://blog.yearnfar.com/posts/%E4%B8%AD%E5%9B%BD%E7%A7%BB%E5%8A%A8%E5%AE%BD%E5%B8%A6%E8%AE%BE%E7%BD%AEipv6/ -&lt;p>由于国家大力推进IPv6，目前我们使用手机流量上网时都可以分配到IPv6地址。大家可以通过手机自带浏览器访问 &lt;a href="https://test-ipv6.com/">https://test-ipv6.com/&lt;/a> 查看手机是否支持IPv6。&lt;/p>
&lt;p>除了手机流量，我们还会使用WiFi上网，WiFi上网时，就未必是有IPv6地址了。目前主流的网络供应商应该也是支持IPv6的，问题大概率是出现在用户自己的路由是否支持IPv6和以及路由的设置上。&lt;/p>
&lt;p>这以我的情况讲解下如何开启IPv6。&lt;/p>
&lt;p>我使用的是中国移动宽带，接入户的是光纤。所以有一个光猫 + 自己购买的路由器。要支持IPv6需要满足3个条件：&lt;/p>
&lt;ul>
&lt;li>移动入户的网络是否支持IPv6。&lt;/li>
&lt;li>光猫支持IPv6。&lt;/li>
&lt;li>自己购买的路由支持IPv6。&lt;/li>
&lt;/ul>
&lt;p>一般默认情况下，我们都是使用光猫拨号上网，路由自动获取IP地址的方式上网。这是联网的时候，运营商的小哥这么设定的。我建议改成光猫使用桥接模式，并通过路由拨号的方式上网。&lt;/p>
&lt;h3 id="光猫设置">光猫设置&lt;/h3>
&lt;p>光猫的后台地址一般是http://192.168.1.1&lt;/p>
&lt;p>光猫的后面有一个账号useradmin和密码，但是这个账号权限太少，无法设置网络相关的东西，我们这里需要用到超级管理员，移动的超管账号是: CMCCAdmin 密码：aDm8H%MdA&lt;/p>
&lt;p>登录之后，查看 网络 =&amp;gt;宽带设置=&amp;gt; 连接名称，连接名称一般有很多下拉选项。&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/06/667884ce8dec1c271a33973557ea5398.png" alt="移动宽带连接">&lt;/p>
&lt;p>其中有一项是PPPoe拨号的，选中该连接名称。&lt;/p>
&lt;p>记录下宽带账号！密码如果没有修改过的话默认是手机号后六位，如果改过又不记得也可以去中国移动官网重置密码。&lt;/p>
&lt;p>将模式改为Bridge、协议模式改为IPv4 &amp;amp; IPv6，并保存。其他的都可以不改（也不要去随便修改，我遇到过改了Vlan 设置导致拨号一直连不上网的情况，好在我在修改之前截图备份了，把参数改回去之后又正常了）。&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/06/4496a17629f3097db436e063b62575fb.png" alt="移动宽带联接2">&lt;/p>
&lt;p>保存之后，查看 状态 =&amp;gt; 网络侧信息，可以看到有一条类型是Bridge，协议是 IPv4 &amp;amp; IPv6，状态是 Connected 的记录。到这里，光猫部分的设置就已经完成了。&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/06/3e2aa5804ac1f2658119b79951db61e2.png" alt="移动网络状态">&lt;/p>
&lt;h3 id="路由设置">路由设置&lt;/h3>
&lt;p>进入到路由的后台，选择宽带账号上网，输入宽带账号，宽带密码，并联接，即可上网。&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/06/8981316d1f4b44d91719dff73a15573f.png" alt="路由拨号上网">&lt;/p>
&lt;p>找到IPv6的设置菜单，打开IPv6，如果没有这个菜单，说明路由并不支持IPv6。&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/06/c3c12c4d265a3bc5c456155834543c51.jpg" alt="路由ipv6开关">&lt;/p>
&lt;h3 id="验证ipv6">验证IPv6&lt;/h3>
&lt;h4 id="方式一">方式一：&lt;/h4>
&lt;p>浏览器打开 &lt;a href="http://test-ipv6.com/">http://test-ipv6.com/&lt;/a> 验证是否支持IPv6。&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/06/3d1ce966ae9b3aaa977995c90e953f00.png" alt="ipv6测试结果">&lt;/p>
&lt;h4 id="方式二">方式二&lt;/h4>
&lt;p>终端通过CURL获取当前电脑IPv6地址&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">➜ ~ curl https://myip6.ipip.net
当前 IP：2409:8a55:628:4250:4982:c8ad:****:**** 来自于：中国 广东 广州 移动
&lt;/code>&lt;/pre>&lt;/div>- https://blog.yearnfar.com/posts/%E4%B8%AD%E5%9B%BD%E7%A7%BB%E5%8A%A8%E5%AE%BD%E5%B8%A6%E8%AE%BE%E7%BD%AEipv6/ - yearnfar 2022</description></item><item><title>使用tinyproxy搭建代理服务器</title><link>https://blog.yearnfar.com/posts/%E4%BD%BF%E7%94%A8tinyproxy%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Sun, 29 May 2022 00:26:10 +0800</pubDate><guid>https://blog.yearnfar.com/posts/%E4%BD%BF%E7%94%A8tinyproxy%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>知识时光机 https://blog.yearnfar.com/posts/%E4%BD%BF%E7%94%A8tinyproxy%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/ -&lt;p>程序员都有遇到，需要在终端设置http_proxy的情况。这里介绍使用tinyproxy使得在终端科学上网。&lt;/p>
&lt;h3 id="源码编译安装tinyproxy">源码编译安装Tinyproxy&lt;/h3>
&lt;p>&lt;a href="https://github.com/tinyproxy/tinyproxy">Tinyproxy项目地址&lt;/a>&lt;/p>
&lt;p>下载安装包到本地&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">[yearnfar@aws ~]$ wget https://github.com/tinyproxy/tinyproxy/releases/download/1.11.1/tinyproxy-1.11.1.tar.gz
[yearnfar@aws ~]$ tar zxvf tinyproxy-1.11.1.tar.gz
[yearnfar@aws ~]$ &lt;span style="color:#658b00">cd&lt;/span> tinyproxy-1.11.1
[yearnfar@aws ~]$ ./configure --prefix=/usr/local/tinyproxy
[yearnfar@aws ~]$ make
&lt;span style="color:#228b22"># 如果提示性没有 gcc&lt;/span>
&lt;span style="color:#228b22"># [yearnfar@aws ~]$ make yum install gcc&lt;/span>
[yearnfar@aws ~]$ sudo make install
[yearnfar@aws ~]$ &lt;span style="color:#658b00">cd&lt;/span> /usr/local/tinyproxy
[yearnfar@aws tinyproxy]$ ls
bin etc share
[yearnfar@aws tinyproxy]$ sudo cp -r etc/tinyproxy /etc/ &lt;span style="color:#228b22"># 将配置文件移动到/etc目录&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改配置文件&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#658b00">User nobody&lt;/span>
&lt;span style="color:#658b00">Group nobody&lt;/span>
&lt;span style="color:#228b22"># 为了避免被扫描到，最好修改一个端口&lt;/span>
&lt;span style="color:#658b00">Port 8888 &lt;/span>
&lt;span style="color:#658b00">Timeout 600&lt;/span>
&lt;span style="color:#658b00">DefaultErrorFile &amp;#34;/usr/local/tinyproxy/share/tinyproxy/default.html&amp;#34;&lt;/span>
&lt;span style="color:#658b00">StatFile &amp;#34;/usr/local/tinyproxy/share/tinyproxy/stats.html&amp;#34;&lt;/span>
&lt;span style="color:#658b00">LogFile &amp;#34;/var/log/tinyproxy.log&amp;#34;&lt;/span>
&lt;span style="color:#658b00">LogLevel Info&lt;/span>
&lt;span style="color:#658b00">PidFile &amp;#34;/var/run/tinyproxy.pid&amp;#34;&lt;/span>
&lt;span style="color:#658b00">MaxClients 100&lt;/span>
&lt;span style="color:#228b22"># 需要设置一个密码，防止被扫描到，被搭便车&lt;/span>
&lt;span style="color:#658b00">BasicAuth youname your_password&lt;/span>
&lt;span style="color:#228b22"># 必须设置，否则默认禁止全部代理&lt;/span>
&lt;span style="color:#658b00">FilterDefaultDeny No&lt;/span>
&lt;span style="color:#228b22"># 需要注释掉，否则只能本机使用&lt;/span>
&lt;span style="color:#228b22">#Allow 127.0.0.1&lt;/span>
&lt;span style="color:#228b22">#Allow ::1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动代理服务器&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">[yearnfar@aws tinyproxy]$ sudo /usr/local/tinyproxy/bin/tinyproxy -c /etc/tinyproxy/tinyproxy
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="测试代理">测试代理&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">➜ ~ curl cip.cc
IP : 218.19.46.x
地址 : 中国 广东 广州
运营商 : 电信
数据二 : 广东省广州市 | 电信
数据三 :
URL : http://www.cip.cc/218.19.46.x
➜ ~ &lt;span style="color:#658b00">export&lt;/span> &lt;span style="color:#00688b">http_proxy&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;http://yourname:your_password@you_ip:8888&amp;#34;&lt;/span>
➜ ~ curl cip.cc
IP : 13.214.254.x
地址 : 美国 美国
数据二 : 美国 | Xerox
数据三 : 美国康涅狄格 | 亚马逊
URL : http://www.cip.cc/13.214.254.x
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，代理正常。如果不正常，可以按以下顺序检查：&lt;/p>
&lt;ul>
&lt;li>Tinyproxy服务是否启动&lt;/li>
&lt;li>云服务器安全组设置是否开放Tinyproxy的监听端口（例如:8888）。&lt;/li>
&lt;/ul>
&lt;h3 id="设置开机自启">设置开机自启&lt;/h3>
&lt;p>创建文件tinyproxy.service&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#8b008b;font-weight:bold">[Unit]&lt;/span>
&lt;span style="color:#658b00">Description&lt;/span>=&lt;span style="color:#cd5555">Tinyproxy daemon&lt;/span>
&lt;span style="color:#658b00">Requires&lt;/span>=&lt;span style="color:#cd5555">network.target&lt;/span>
&lt;span style="color:#658b00">After&lt;/span>=&lt;span style="color:#cd5555">network.target&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">[Service]&lt;/span>
&lt;span style="color:#658b00">Type&lt;/span>=&lt;span style="color:#cd5555">forking&lt;/span>
&lt;span style="color:#658b00">PIDFile&lt;/span>=&lt;span style="color:#cd5555">/var/run/tinyproxy.pid&lt;/span>
&lt;span style="color:#658b00">ExecStart&lt;/span>=&lt;span style="color:#cd5555">/usr/sbin/tinyproxy -c /etc/tinyproxy/tinyproxy.conf&lt;/span>
&lt;span style="color:#658b00">Restart&lt;/span>=&lt;span style="color:#cd5555">on-failure&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">[Install]&lt;/span>
&lt;span style="color:#658b00">WantedBy&lt;/span>=&lt;span style="color:#cd5555">multi-user.target&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">[yearnfar@aws ~]$ sudo cp tinyproxy.service /lib/systemd/system/tinyproxy.service
[yearnfar@aws ~]$ sudo systemctl &lt;span style="color:#658b00">enable&lt;/span> tinyproxy
[yearnfar@aws ~]$ sudo systemctl start tinyproxy
&lt;/code>&lt;/pre>&lt;/div>- https://blog.yearnfar.com/posts/%E4%BD%BF%E7%94%A8tinyproxy%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/ - yearnfar 2022</description></item><item><title>在Jetson Nano上跑yolov5</title><link>https://blog.yearnfar.com/posts/%E5%9C%A8jetson-nano%E4%B8%8A%E8%B7%91yolov5/</link><pubDate>Sun, 22 May 2022 18:16:32 +0800</pubDate><guid>https://blog.yearnfar.com/posts/%E5%9C%A8jetson-nano%E4%B8%8A%E8%B7%91yolov5/</guid><description>知识时光机 https://blog.yearnfar.com/posts/%E5%9C%A8jetson-nano%E4%B8%8A%E8%B7%91yolov5/ -&lt;h2 id="jetson-naon搭建">Jetson Naon搭建&lt;/h2>
&lt;p>参考官方文档：&lt;a href="https://developer.nvidia.com/zh-cn/embedded/learn/get-started-jetson-nano-devkit">Jetson Nano 开发者套件入门&lt;/a>&lt;/p>
&lt;p>按照官方文档搭建好Jetson Nano环境后，可以看到/usr/local/cuda目录，将CUDA加入环境变量：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#658b00">export&lt;/span> &lt;span style="color:#00688b">CUDA_HOME&lt;/span>=/usr/local/cuda
&lt;span style="color:#658b00">export&lt;/span> &lt;span style="color:#00688b">PATH&lt;/span>=&lt;span style="color:#00688b">$CUDA_HOME&lt;/span>/bin:&lt;span style="color:#00688b">$PATH&lt;/span>
&lt;span style="color:#658b00">export&lt;/span> &lt;span style="color:#00688b">LD_LIBRARY_PATH&lt;/span>=&lt;span style="color:#00688b">$CUDA_HOME&lt;/span>/lib64:&lt;span style="color:#00688b">$LD_LIBRARY_PATH&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看CUDA信息&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">➜ ~ nvcc -V
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2021 NVIDIA Corporation
Built on Sun_Feb_28_22:34:44_PST_2021
Cuda compilation tools, release 10.2, V10.2.300
Build cuda_10.2_r440.TC440_70.29663091_0
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="准备python">准备Python&lt;/h2>
&lt;p>以前一直使用Anaconda管理Python环境，但是在Jetson Nano安装Anaconda或Miniconda时都出现了&amp;quot;core dumped&amp;quot;，最后发现了miniforge 这个项目。&lt;/p>
&lt;p>我这里安装的是4.12.0版本：&lt;a href="https://github.com/conda-forge/miniforge/releases/download/4.12.0-0/Mambaforge-4.12.0-0-Linux-aarch64.sh">Mambaforge-Linux-aarch64.sh&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">➜ ~ sudo ./Mambaforge-Linux-aarch64.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装好Mamba后就是创建Python环境了。&lt;/p>
&lt;p>因为PyTorch官方不提供ARM aarch64架构的CUDA版本，所以我下载Nvida官网编译好的二进制包。目前提供PyTorch1.0.0 ~ PyTorch1.12.0 总计13个版本可供选择。&lt;/p>
&lt;p>&lt;a href="https://forums.developer.nvidia.com/t/pytorch-for-jetson-version-1-11-now-available/72048">PyTorch for Jetson&lt;/a>&lt;/p>
&lt;p>怎么选择PyTorch版本呢？我们可以看到不同的PyTorch版本对JetPack版本要求是不一样，先查看Jetson Nano的JetPack版本。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">➜ ~ cat /etc/nv_tegra_release
&lt;span style="color:#228b22"># R32 (release), REVISION: 7.2, GCID: 30192233, BOARD: t210ref, EABI: aarch64, DATE: Wed Apr 20 21:34:48 UTC 2022&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到默认安装的是JetPack R32，JetPack R32支持的PyTorch最高的版本是v1.10.0，对应的Python版本是3.6。&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/05/f2797550a253297f6de428e927cd81ed.jpg" alt="nvidia">&lt;/p>
&lt;p>创建Python3.6环境：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">mamba create -n yolov5 &lt;span style="color:#00688b">python&lt;/span>=3.6
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装pytorch">安装PyTorch&lt;/h2>
&lt;p>下载&lt;a href="https://developer.nvidia.com/zh-cn/embedded/learn/get-started-jetson-nano-devkit">PyTorch&lt;/a>，并运行下面命令安装。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo apt-get install libopenblas-base libopenmpi-dev libomp-dev
pip install Cython
pip install torch-1.10.0-cp36-cp36m-linux_aarch64.whl
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查PyTorch安装情况：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">(yolov5) ➜ python
Python 3.6.15 | packaged by conda-forge | (default, Dec &lt;span style="color:#b452cd">3&lt;/span> 2021, 19:12:04)
[GCC 9.4.0] on linux
Type &lt;span style="color:#cd5555">&amp;#34;help&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;copyright&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;credits&amp;#34;&lt;/span> or &lt;span style="color:#cd5555">&amp;#34;license&amp;#34;&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> more information.
&amp;gt;&amp;gt;&amp;gt; import torch
&amp;gt;&amp;gt;&amp;gt; print(torch.cuda.is_available())
True
&amp;gt;&amp;gt;&amp;gt; print(torch.backends.cudnn.version())
&lt;span style="color:#b452cd">8201&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装torversion">安装torversion&lt;/h2>
&lt;p>因为PyTorch选择的是v1.10.0，所以torchvision需要安装版本0.11.0。因为torchvision依赖pillow，安装时默认会安装最新的pillow。但是最新的pillow会产生其他问题，所以这里先安装好pillow版本8.4.0。&lt;/p>
&lt;p>&lt;a href="https://github.com/pytorch/vision">Torchvision项目地址&lt;/a>&lt;/p>
&lt;p>先安装依赖&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">(yolov5) ➜ ~ sudo apt-get install libjpeg8 libjpeg62-dev libfreetype6 libfreetype6-dev
(yolov5) ➜ ~ pip install &lt;span style="color:#00688b">pillow&lt;/span>==8.4.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下载torchvision源码，并安装：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">python setup.py install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查torchvision安装情况：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">(yolov5) ➜ ~ python
Python 3.6.15 | packaged by conda-forge | (default, Dec &lt;span style="color:#b452cd">3&lt;/span> 2021, 19:12:04)
[GCC 9.4.0] on linux
Type &lt;span style="color:#cd5555">&amp;#34;help&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;copyright&amp;#34;&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;credits&amp;#34;&lt;/span> or &lt;span style="color:#cd5555">&amp;#34;license&amp;#34;&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> more information.
&amp;gt;&amp;gt;&amp;gt; import torchvision
&amp;gt;&amp;gt;&amp;gt; print(torchvision.__version__)
0.11.0a0
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装yolov5">安装Yolov5&lt;/h2>
&lt;p>&lt;a href="https://github.com/ultralytics/yolov5">Yolov5项目地址&lt;/a>&lt;/p>
&lt;p>下载项目源码，并安装依赖：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">(yolov5) ➜ ~ pip install -r requirements.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行yolov5：&lt;/p>
&lt;pre>&lt;code>(yolov5) ➜ yolov5 python detect.py --source 0
&lt;/code>&lt;/pre>&lt;p>效果如下：&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/05/7e866c29da33e98d7d2eeea6d25b3af6.png" alt="23-07-36屏幕截图">&lt;/p>
- https://blog.yearnfar.com/posts/%E5%9C%A8jetson-nano%E4%B8%8A%E8%B7%91yolov5/ - yearnfar 2022</description></item><item><title>systemctl使用方式</title><link>https://blog.yearnfar.com/posts/systemctl%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</link><pubDate>Sun, 22 May 2022 17:53:42 +0800</pubDate><guid>https://blog.yearnfar.com/posts/systemctl%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</guid><description>知识时光机 https://blog.yearnfar.com/posts/systemctl%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/ -&lt;p>以nginx为例，介绍如何使用systemctl 把程序做成服务。&lt;/p>
&lt;h2 id="配置">配置&lt;/h2>
&lt;p>创建服务配置文件 nginx.service&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#8b008b;font-weight:bold">[Unit]&lt;/span>
&lt;span style="color:#658b00">Description&lt;/span>=&lt;span style="color:#cd5555">The nginx HTTP and reverse proxy server&lt;/span>
&lt;span style="color:#658b00">After&lt;/span>=&lt;span style="color:#cd5555">network.target remote-fs.target nss-lookup.target&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">[Service]&lt;/span>
&lt;span style="color:#658b00">Type&lt;/span>=&lt;span style="color:#cd5555">forking&lt;/span>
&lt;span style="color:#658b00">PIDFile&lt;/span>=&lt;span style="color:#cd5555">/run/nginx.pid&lt;/span>
&lt;span style="color:#228b22"># Nginx will fail to start if /run/nginx.pid already exists but has the wrong&lt;/span>
&lt;span style="color:#228b22"># SELinux context. This might happen when running `nginx -t` from the cmdline.&lt;/span>
&lt;span style="color:#228b22"># https://bugzilla.redhat.com/show_bug.cgi?id=1268621&lt;/span>
&lt;span style="color:#658b00">ExecStartPre&lt;/span>=&lt;span style="color:#cd5555">/usr/bin/rm -f /run/nginx.pid&lt;/span>
&lt;span style="color:#658b00">ExecStartPre&lt;/span>=&lt;span style="color:#cd5555">/usr/sbin/nginx -t&lt;/span>
&lt;span style="color:#658b00">ExecStart&lt;/span>=&lt;span style="color:#cd5555">/usr/sbin/nginx&lt;/span>
&lt;span style="color:#658b00">ExecReload&lt;/span>=&lt;span style="color:#cd5555">/bin/kill -s HUP $MAINPID&lt;/span>
&lt;span style="color:#658b00">KillSignal&lt;/span>=&lt;span style="color:#cd5555">SIGQUIT&lt;/span>
&lt;span style="color:#658b00">TimeoutStopSec&lt;/span>=&lt;span style="color:#cd5555">5&lt;/span>
&lt;span style="color:#658b00">KillMode&lt;/span>=&lt;span style="color:#cd5555">mixed&lt;/span>
&lt;span style="color:#658b00">PrivateTmp&lt;/span>=&lt;span style="color:#cd5555">true&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">[Install]&lt;/span>
&lt;span style="color:#658b00">WantedBy&lt;/span>=&lt;span style="color:#cd5555">multi-user.target&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将nginx.service 放到 /lib/systemd/system/ 目录，systemctl会在这个目录查找配置文件。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo mv nginx.service /lib/systemd/system/
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="常用命令">常用命令&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#228b22"># 开启自动启动&lt;/span>
sudo systemctl &lt;span style="color:#658b00">enable&lt;/span> nginx
&lt;span style="color:#228b22"># 取消开机启动&lt;/span>
sudo systemctl disable nginx
&lt;span style="color:#228b22"># 启动服务&lt;/span>
sudo systemctl start nginx
&lt;span style="color:#228b22"># 停止服务&lt;/span>
sudo systemcl stop nginx
&lt;/code>&lt;/pre>&lt;/div>- https://blog.yearnfar.com/posts/systemctl%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/ - yearnfar 2022</description></item><item><title>为什么中国古人不能发明蒸汽机</title><link>https://blog.yearnfar.com/posts/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%AD%E5%9B%BD%E5%8F%A4%E4%BA%BA%E4%B8%8D%E8%83%BD%E5%8F%91%E6%98%8E%E8%92%B8%E6%B1%BD%E6%9C%BA/</link><pubDate>Mon, 16 May 2022 21:38:00 +0800</pubDate><guid>https://blog.yearnfar.com/posts/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%AD%E5%9B%BD%E5%8F%A4%E4%BA%BA%E4%B8%8D%E8%83%BD%E5%8F%91%E6%98%8E%E8%92%B8%E6%B1%BD%E6%9C%BA/</guid><description>知识时光机 https://blog.yearnfar.com/posts/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%AD%E5%9B%BD%E5%8F%A4%E4%BA%BA%E4%B8%8D%E8%83%BD%E5%8F%91%E6%98%8E%E8%92%B8%E6%B1%BD%E6%9C%BA/ -&lt;p>以现代视角来看，蒸汽机原理并不算复杂，为什么古人在几千年的历史中都没有发明蒸汽机？我从来没有怀疑过古人的聪明智慧，但是没有发明蒸汽机，我相信有其中的必然原因。于是我带着一台瓦特改良的蒸汽机开始了我的穿越之旅。&lt;/p>
&lt;h3 id="蒸汽机vs汉朝黄牛">蒸汽机VS汉朝黄牛&lt;/h3>
&lt;p>首先我穿越来到了汉朝，虽然在汉朝人们已经开始使用煤炭，但是并没有大规模应用，我只能使用木材当做燃料。&lt;/p>
&lt;p>我请了一个樵夫，帮我打柴，并把蒸汽机搬到了广场上，向人们展示我的蒸汽机。&lt;/p>
&lt;p>“它能做什么”？有人问道。&lt;/p>
&lt;p>“他能推动磨盘，所有需要人力的事他都能做！”&lt;/p>
&lt;p>“哦，跟水车一样啊。我看你往里面加木柴，但是水车不需要木柴呢！”&lt;/p>
&lt;p>“水车只能建在有水的地方，我这个可以建在所有有水的地方。” 我气愤的说道。&lt;/p>
&lt;p>“没有水的地方可以使用牛啊”又有人说道。&lt;/p>
&lt;p>我竟然无言以对，想想也是，牛只需要吃草，既然耕地，拉磨，也能拉车。&lt;/p>
&lt;p>于是在汉朝黄牛VS 蒸汽机，蒸汽机败了。&lt;/p>
&lt;h3 id="蒸汽机vs大明船帆">蒸汽机VS大明船帆&lt;/h3>
&lt;p>在认真分析了汉朝的失败经验后，我决定穿越到明朝。原因有二：&lt;/p>
&lt;ol>
&lt;li>明朝已经开始大规模使用煤炭了，燃料问题解决了。&lt;/li>
&lt;li>明朝航海业发达，大船&amp;amp;蒸汽机是个不错的落地方案。&lt;/li>
&lt;/ol>
&lt;p>于是我直接穿越到了明朝，找到郑和，向他推销我的蒸汽机。&lt;/p>
&lt;p>“大人，这个设备可以装到大船上，代替人力，只需要烧煤炭就可以了。”我说道&lt;/p>
&lt;p>“这个东西这么大，船甲板能承受得了这个重量吗？”郑和问道。&lt;/p>
&lt;p>“甲板上都用铁板就可以了”。我自信满满的说道&lt;/p>
&lt;p>“装满煤炭能去下西洋吗？到了没有煤的地方怎么办呢？”。郑和问道&lt;/p>
&lt;p>“我&amp;hellip;&amp;quot;&lt;/p>
&lt;p>到了明朝，我的蒸汽机竟然面临了和新能源一样的困境，里程焦虑。并不是每个地方都可以买到煤，相比之下船帆+人力的组合更靠谱一些。&lt;/p>
&lt;h3 id="反思">反思&lt;/h3>
&lt;p>看样子不是古人不够聪明，恰恰相反，是他们太聪明，蒸汽机并不是他们当时场景下的最佳的选择而没有被发明。&lt;/p>
&lt;p>但是这么先进的东西，没有被发明确实一种遗憾，我们应该避免在当今年代遇到蒸汽机同样的问题。庆幸的是我们这个时代有实验室、研究所这些机构，他们不用太关注经济利益，去研究科学。&lt;/p>
&lt;h3 id="heading">&lt;/h3>
- https://blog.yearnfar.com/posts/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%AD%E5%9B%BD%E5%8F%A4%E4%BA%BA%E4%B8%8D%E8%83%BD%E5%8F%91%E6%98%8E%E8%92%B8%E6%B1%BD%E6%9C%BA/ - yearnfar 2022</description></item><item><title>IGC2022-05-16</title><link>https://blog.yearnfar.com/posts/igc2022-05-16/</link><pubDate>Mon, 16 May 2022 19:14:22 +0800</pubDate><guid>https://blog.yearnfar.com/posts/igc2022-05-16/</guid><description>知识时光机 https://blog.yearnfar.com/posts/igc2022-05-16/ -&lt;p>最近连着下了几天雨，今天天气有转好的迹象，拍几张照片留作纪念。&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/05/a6c10bc497e8ab4afab67c35d1cefa98.jpg" alt="广州塔-小蛮腰">&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/05/658c297d1ddcd04aa5d639838934883a.jpg" alt="周大福中心">&lt;/p>
&lt;p>&lt;img src="https://cdn.yearnfar.com/blog/22/05/84ddc87eaa55b2a0516c86f6dc18d599.jpg" alt="晚霞">&lt;/p>
- https://blog.yearnfar.com/posts/igc2022-05-16/ - yearnfar 2022</description></item><item><title>su和su -和sudo区别</title><link>https://blog.yearnfar.com/posts/su%E5%92%8Csu-%E5%92%8Csudo%E5%8C%BA%E5%88%AB/</link><pubDate>Tue, 10 May 2022 19:24:06 +0800</pubDate><guid>https://blog.yearnfar.com/posts/su%E5%92%8Csu-%E5%92%8Csudo%E5%8C%BA%E5%88%AB/</guid><description>知识时光机 https://blog.yearnfar.com/posts/su%E5%92%8Csu-%E5%92%8Csudo%E5%8C%BA%E5%88%AB/ -&lt;p>最近强迫症又犯了，把自己跑了4年的服务器重装了下系统。重装之后，开始认真的研究如何使用。&lt;/p>
&lt;p>以前很少使用sudo这个命令，如果要root权限一般都是直接su 输入root密码。但是sudo明显要更加方便。于是就开启了sudo权限。&lt;/p>
&lt;h3 id="开启sudo">开启sudo&lt;/h3>
&lt;p>visudo 在root下添加一行&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#228b22">## Allow root to run any commands anywhere&lt;/span>
root &lt;span style="color:#00688b">ALL&lt;/span>=(ALL) ALL
your_name &lt;span style="color:#00688b">ALL&lt;/span>=(ALL) NOPASSWD: ALL
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="su-与-su---与-sudo">su 与 su - 与 sudo&lt;/h3>
&lt;p>su 不加任何参数，切换到root，不变环境变量(与切换前一致)。&lt;/p>
&lt;p>su - ，切换到root，并且切换到root的环境变量。&lt;/p>
&lt;p>sudo能使用root权限执行，但是需要注意使用时将PATH环境变量进行了重置，我们使用sudo visudo 在secure_path可以看到sudo所设置的PATH环境变量。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">Defaults &lt;span style="color:#00688b">secure_path&lt;/span> = /sbin:/bin:/usr/sbin:/usr/bin:
&lt;/code>&lt;/pre>&lt;/div>- https://blog.yearnfar.com/posts/su%E5%92%8Csu-%E5%92%8Csudo%E5%8C%BA%E5%88%AB/ - yearnfar 2022</description></item><item><title>Go1.18泛型实现并发安全的map</title><link>https://blog.yearnfar.com/posts/go1.18%E6%B3%9B%E5%9E%8B%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84map/</link><pubDate>Tue, 26 Apr 2022 00:03:52 +0800</pubDate><guid>https://blog.yearnfar.com/posts/go1.18%E6%B3%9B%E5%9E%8B%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84map/</guid><description>知识时光机 https://blog.yearnfar.com/posts/go1.18%E6%B3%9B%E5%9E%8B%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84map/ -&lt;p>使用go泛型失效并发安全的map结构&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8b008b;font-weight:bold">package&lt;/span> mut
&lt;span style="color:#8b008b;font-weight:bold">import&lt;/span> (
&lt;span style="color:#cd5555">&amp;#34;sync&amp;#34;&lt;/span>
)
&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span> Map[K, V comparable] &lt;span style="color:#8b008b;font-weight:bold">struct&lt;/span> {
mu sync.RWMutex
values &lt;span style="color:#8b008b;font-weight:bold">map&lt;/span>[K]V
}
&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> (m *Map[K, V]) &lt;span style="color:#008b45">Put&lt;/span>(key K, value V) {
m.mu.&lt;span style="color:#008b45">Lock&lt;/span>()
m.values[key] = value
m.mu.&lt;span style="color:#008b45">Unlock&lt;/span>()
}
&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> (m *Map[K, V]) &lt;span style="color:#008b45">Get&lt;/span>(key K) V {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> v V
m.mu.&lt;span style="color:#008b45">RLock&lt;/span>()
v = m.values[key]
m.mu.&lt;span style="color:#008b45">RUnlock&lt;/span>()
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> v
}
&lt;span style="color:#8b008b;font-weight:bold">func&lt;/span> NewMap[K, V comparable]() *Map[K, V] {
m := &amp;amp;Map[K, V]{}
m.values = &lt;span style="color:#658b00">make&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">map&lt;/span>[K]V)
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> m
}
&lt;/code>&lt;/pre>&lt;/div>- https://blog.yearnfar.com/posts/go1.18%E6%B3%9B%E5%9E%8B%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84map/ - yearnfar 2022</description></item></channel></rss>