<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>知识时光机</title><link>https://blog.yearnfar.com/</link><description>Recent content on 知识时光机</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>yearnfar 2022</copyright><lastBuildDate>Sat, 23 Apr 2022 21:24:40 +0800</lastBuildDate><atom:link href="https://blog.yearnfar.com/index.xml" rel="self" type="application/rss+xml"/><item><title>数据库缓存一致性</title><link>https://blog.yearnfar.com/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/</link><pubDate>Sat, 23 Apr 2022 21:24:40 +0800</pubDate><guid>https://blog.yearnfar.com/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/</guid><description>知识时光机 https://blog.yearnfar.com/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/ -&lt;p>在高并发场景下，保证数据库和缓存一致性&lt;/p>
&lt;p>更新缓存有4中方案&lt;/p>
&lt;ul>
&lt;li>先更新数据库，然后更新缓存&lt;/li>
&lt;li>先更新缓存，然后更新数据库&lt;/li>
&lt;li>先更新数据库，然后删除缓存&lt;/li>
&lt;li>先删除缓存，然后更新数据库&lt;/li>
&lt;/ul>
&lt;p>下面我们分别分四种情况的高并发情况下，四种方案可能出现的问题：&lt;/p>
&lt;h3 id="先更新数据库然后更新缓存">先更新数据库，然后更新缓存&lt;/h3>
&lt;p>&lt;img src="https://blog.yearnfar.com/images/%E5%85%88%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E6%9B%B4%E6%96%B0%E7%BC%93%E5%AD%98.drawio.png" alt="">&lt;/p>
&lt;p>进程一、进程二都模拟了一个先更新数据库，后更新缓存的场景。&lt;/p>
&lt;p>1、如果进程更新缓存发生时间在进程一更新缓存之前，即t3变成了t3`，这时存储的缓存值是v1。发生了数据库和缓存不一致的情况。&lt;/p>
&lt;p>2、如果更新后的这个key对应的缓存使用率不高，则会导致缓存空间的浪费。&lt;/p>
&lt;h3 id="先更新缓存然后更新数据库">先更新缓存，然后更新数据库&lt;/h3>
&lt;p>先更新缓存后更新数据库，会遇到的问题似乎更多：&lt;/p>
&lt;p>1、更新缓存成功后，更新数据库失败的情况，&lt;/p>
&lt;h3 id="先更新数据库然后删除缓存">先更新数据库，然后删除缓存&lt;/h3>
&lt;p>&lt;img src="https://blog.yearnfar.com/images/%E5%85%88%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8E%E5%88%A0%E9%99%A4%E7%BC%93%E5%AD%98.drawio.png" alt="">&lt;/p>
&lt;p>进程一、进程三模拟更新数据库并删除缓存。&lt;/p>
&lt;p>进程二模拟首次生成缓存值。&lt;/p>
&lt;p>从上面的图可以看出，如果t3-&amp;gt;t6时间段有更新数据库并删除缓存，则会出数据库中值为v2，但是缓存中值为v1的情况。这种概率几乎可以忽略不计，因为t3-&amp;gt; t6时间非常短，且更新数据库和删除缓存都必须都发生在这个时间才会导致上述情况。&lt;/p>
&lt;p>但是，如果t1或者t5删除缓存失败，则会导致在缓存被删除或失效前读取到的都是旧值。所以这种方案需要确保删除缓存操作的可靠性很高。推荐的做法是，先删除一次，如果删除失败，再写入消息队列，使用消息队列的重试删除，直到删除成功为止。&lt;/p>
- https://blog.yearnfar.com/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/ - yearnfar 2022</description></item><item><title>About</title><link>https://blog.yearnfar.com/about/</link><pubDate>Tue, 05 Apr 2022 17:38:38 +0800</pubDate><guid>https://blog.yearnfar.com/about/</guid><description>知识时光机 https://blog.yearnfar.com/about/ -- https://blog.yearnfar.com/about/ - yearnfar 2022</description></item><item><title>知识时光机</title><link>https://blog.yearnfar.com/posts/%E7%9F%A5%E8%AF%86%E6%97%B6%E5%85%89%E6%9C%BA/</link><pubDate>Tue, 05 Apr 2022 09:52:43 +0800</pubDate><guid>https://blog.yearnfar.com/posts/%E7%9F%A5%E8%AF%86%E6%97%B6%E5%85%89%E6%9C%BA/</guid><description>知识时光机 https://blog.yearnfar.com/posts/%E7%9F%A5%E8%AF%86%E6%97%B6%E5%85%89%E6%9C%BA/ -&lt;h1 id="为什么要写博客">为什么要写博客&lt;/h1>
&lt;p>以前在开源中国上面写过一段时间的博客，偶尔也写一些原创性的，但是大多数还是已转载为主。可能是转载的转多了（可以转载为什么要原创），也可能是进步太慢（没有什么可以总结的），后来慢慢的也不写博客了。最近更加注重学习和总结，于是又重新拾起博客，让它记录我学习和成长的过程。&lt;/p>
&lt;h1 id="应该避免的问题">应该避免的问题&lt;/h1>
&lt;p>既然现在开始写博客，我想还是要先总结下以前放弃写博客的原因，以及怎么做才能不重蹈覆辙。&lt;/p>
&lt;h2 id="傻逼定律">傻逼定律&lt;/h2>
&lt;p>写完一篇博客，过了一段时间回过头来看，发现分享的东西特别的初级或者分享的想法不够成熟。这个时候我往往会选择删掉它，或许这是打击我写博客的最大因素吧。人总是在成长，用以后的眼光看现在的东西是不对的，我应该以发现以前的自己是个“傻逼”而高兴，而不是去遮盖我以前是个“傻逼”的事实。&lt;/p>
&lt;h2 id="不转载">不转载&lt;/h2>
&lt;p>以前写博客总喜欢去转载别人的，或者大多数是别人的，自己只是在它的基础上重新组织下。转载就好像写代码的时候直接Copy别人的代码，对其中的很多东西了解的并不彻底。而且自己内心对转载的东西还是比较拒绝的，当发现自己的博客里面大部分都是转载的东西时，就觉得这已经不是自己的博客。慢慢也就没有了写作的兴趣，所以我觉得还是应该不转载其他人的文章。&lt;/p>
&lt;h2 id="心态问题">心态问题&lt;/h2>
&lt;p>以前写一篇博客经常就1~2小时完成，超过了这个时间就觉得不值得，现在回想起来是自己心态也有问题。要真写好一篇博客，需要先选题、查找资料、有时候还要实践、最后才是总结。怎么也不像是1~2小时能完成的事情，如果要短时间内完成，往往也是粗制滥造。粗制滥造的多了，也会挫伤写作积极性。&lt;/p>
&lt;h2 id="写作方式">写作方式&lt;/h2>
&lt;p>以前我一般是在第三方平台(如OSC)或者自己搭建的WordPress上对着编辑器写文章。心里总会有种压迫感，仿佛有人在等我提交。现在改用Hugo+Github Pages，就没有这种压迫感，不发布就不提交，文章保存在本地。而且要迁移也更加方便，我更喜欢这种写作方式。&lt;/p>
- https://blog.yearnfar.com/posts/%E7%9F%A5%E8%AF%86%E6%97%B6%E5%85%89%E6%9C%BA/ - yearnfar 2022</description></item><item><title>Hello world</title><link>https://blog.yearnfar.com/posts/hello-world/</link><pubDate>Mon, 04 Apr 2022 21:35:16 +0800</pubDate><guid>https://blog.yearnfar.com/posts/hello-world/</guid><description>知识时光机 https://blog.yearnfar.com/posts/hello-world/ -&lt;h1 id="hello-world">hello world!&lt;/h1>
- https://blog.yearnfar.com/posts/hello-world/ - yearnfar 2022</description></item></channel></rss>